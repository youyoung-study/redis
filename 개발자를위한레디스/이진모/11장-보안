레디스를 캐시로 사용하는 경우 관계형 데이터베이스의 데이터를 임시로 저장하는 것이기 때문에 신뢰할 수 없는 사용자가 연결돼 레디스에 접근할 수 있게 된다면 데이터베이스에 접근할 수 있는 것과 동일한 효력을 지닌다.

bind 설정은 레디스가 사용할 ip를 지정한다. 레디스의 이전버전에서는 각 인스턴스에 하나의 패스워드만 설정할 수 있었지만 버전 6부터는 유저별로 다른 패스워드를 설정할 수 있다.

## 커넥션 제어

### bind
bind 설정은 레디스가 서버의 여러 ip중 어떤 ip를 통해 들어오는 연결을 받아들일 것인지 지정한다.

레디스는 오직 동일한 서버 내에서의 연결만을 허용한다. 레디스가 설치된 서버 외부에서 직접 레디스에 접근해야 하는 경우, 이값을 서버를 바라보는 다른 유효한 ip주소로 변경해야 한다.

### 패스워드

패스워드를 설정하는 방법은 노드에 직접 패스워드를 지정하는 방식과 버전 6에 새로 추가된 ACL기능을 사용하는 방식이다.

노드 방식
- requirepass 커맨드를 이용해 레디스 서버에 하나의 패스워드를 설정할 수 있다.
- redis-cli를 이용해 패스워드가 설정된 노드에 접속하려면 접속 시 -a 옵션을 이용해 패스워드를 직접 지정할 수도 있다.
- 해당 옵션을 사용하지 않고 접속한 뒤 AUTH 커맨드를 이용해 패스워드를 입력할 수도 있다.

- 패스워드가 설정 돼 있는 인스턴스에 접속한 뒤 인증을 하지 않으면 아무런 커맨드를 사용할 수 없다. Auth 커맨드를 이용해 패스워드를 입력해야 다른 커맨드를 사용할 수 있게 된다.

### Protected mode
레디스를 운영용도로 사용한다면 설정하는 것을 권장한다.
- Protected mode 가 yes일 때 레디스 인스턴스에 패스워드를 설정하지 않았다면 레디스는 127.0.0.1 IP를 이용해 로컬에서 들어오는 연결만을 허용한다.
- 패스워드 없이 레디스 인스턴스를 사용하고 싶을 때에는 protected mode를 no 로 변경해야 한다. 기본값은 yes이므로 레디스를 처음 설치한 뒤 따로 패스워드를 설정해주지 않았다면 로컬에서 직접 연결하는 것만 가능하다.

## 커맨드 제어

### 커맨드 이름 변경
- rename-command는 레디스에서 특정 커맨드를 다른 이름으로 변경하거나 커맨드를 비활성화 할 수 있는 설정이다.
- rename-command는 redis.conf 파일에서 변경할 수 있으며 실행중에는 동적으로 변경할 수 없다.
- rename-command 로 커맨드를 빈 문자열로 변경하면 해당 커맨드는 사용할 수 없게 도니다.


- redis.conf에서 변경한 커맨드는 sentinel.conf에서도 변경해야한다. 그렇지 않다면 장애 상황에서 센티널이 전송하는 커맨드를 레디스가 정상적으로 수행할 수 없어 페일오버가 정상적으로 발생하지 않게 된다.

### 커맨드 실행 환경 제어
사용자는 커맨드의 변경을 아예 차단 또는 허용하거나, 로컬 환경에서만 변경이 가능할 수 있도록 선택할 수 있다.

```bash
enable-protected-config no #dir 및 백업 파일의 경로를 지정하는 dbfile등의 옵션 수정 차단
enable-debug-command no #DEBUG 커맨드 차단
enable-modul-command no #MODUL 커맨드 차단
```

- no: 모든 연결에 대해서 명령어의 수행이 차단된다.
- yes: 모든 연결에 대해서 명령어의 수행이 허용된다.
- local: 로컬 연결에 대해서만 명령어의 수행이 허용된다.

DEBUG 및 MODUL 커맨는 로컬에서만 사용하도록 local로 설정하거나 아예 사용하지 않도록 no 로 설정하는 것이 좋다.

따라라서 보안 강화를 위해 protected-mode를 yes로 설정하고 패스워드를 설정해 사용하는 것을 권장한다.그러나 패스워드를 사용하지 않고 레디스 인스턴스를 사용하려는 경우 enable-protected-configsdhqtusdmf local 또는 no 로 설정해 외부에서 레디스의 중요한 설정 파일을 변경할 수 없도록 하는 것이 좋다.

## ACL
레디스 버전 6에서 도입된 ACL 기능은 유저라는 개념을 도입해, 각 유저별로 실행 가능한 커맨드와 접근 가능한 키를 제한하는 기능이다.

```bash
ACL SETUSER garimoo on >password ~cashed:* &* +@all -@dangerous			
```
- garimoo  : 이름
- on 	   : 활성상태
- password : 비밀번호
- cashed.  : 접근가능한 키
- &*       : 접근가능한 pup/sup 설정
- +@all -@dangerous : 실행 가능한 커맨드

## 유저의 생성과 삭제
ACL SETUSER 와 ACL DELUSER 커맨드로 유저를 생성하거나 삭제할 수 있다.
- ACL GETUSER : 특정 유저 확인
- ACL LIST : 레디스에 생성된 모든 유저를 확인

레디스를 설치하면 기본 유저가 존재한다.

```bash
>ACL LIST
1) "user default on nopass ~* &* +@all"
```

기본유저 특징
- 유저이름 : default
- 유저상태 : on (활성화)
- 유저패스워드 : nopass(패스워드 없음)
- 유저가 접근할 수 있는 키: ~* (전체 키)
- 유저가 접근할수 있는 채널 : &*(전체 체널)
- 유저가 접근할 수 있는 커맨드 : +@all(전체 커맨드)

ACL 규칙은 항상 왼쪽에서 오른쪽으로 적용되기 때문에 권한을 적용하는 순서가 중요하다.

## 유저 상태 제어
- 유저의 활성 상태는 on과 off로 제어할 수 있다.
- on 이라는 구문 없이 유저를 생성하면 기본으로 off의 상태의 유저가 생성된다.
- 활성 상태였던 유저의 상태를 off로 변경한다면 더 이상 이 유저로 접근할 수 없지만, 이미 접속해 있는 유저의 연결은 여전히 유지된다.

## 패스워드
- >패스워드 : 패스워드 지정
- <패스워드 : 패스워드 삭제
기본적으로 패스워드를 지정하지 않으면 유저에 접근할 수 없으나 nopass 권한을 부여하면 유저에는 패스워드 없이 접근할 수 있다. 또한 유저에 resetpass 키워드를 사용하면 추가로 다른 패스워드나 nopass 권한을 부여하기 전까지는 그 유저에 접근할 수 없게 된다.


## 패스워드 저장방식
 - 기존 requirepass를 이용해 패스워드를 정의 하였을 경우 암호화되지 않은채로 패스워드가 저장됐기 때문에 설정 파일에 접근할 수 있거나 혹은 CONFIG GET requirepass커맨드를 이용하면 누구나 패스워드를 확인할 수 있었다.
- ACL을 이용하여 패스워드를 저장하면 내부적으로 SHA256 방식으로 암호화 돼 저장된다.
- ACL GENPASS 커맨드를 이용하면 난수를 생성할 수 있다.

## 커맨드 권한 제어
ACL 기능을 이용해 유저가 사용할 수 있는 커맨드를 제어할 수 있다.

- +@all, allcommands : 모든 커맨드의 수행 권한 부여
- -@all, nocommands : 아무런 커맨드를 수행할 수 없다는 것을 뜻한다.

아무 언급 없이 유저 생성시 -@all 권한 유저 생성
- +@<카테고리> : 특정 카테고리 권한 추가
- -@<카테고리> : 특정 카테고리 권한 제외
- +<커맨드> : 개별 커맨드 권한 추가
- -<커맨드> : 개별 커맨드 권한 제외

- ACL CAT : 레디스에 미리 정의돼 있는 카테고리 커맨드 리스트 확인

카테고리 종류
- dangerous
	- 아무나 사용하면 위험할 수 있는 커맨드가 포함되어 있음
	- 구성변경 커맨드
	- 장애 유발 커맨드
	- 운영 커맨드
- admin
	- admin 카테고리는 dangerous 카테고리에서 장애유발 커맨드를 제외한 커맨드가 들어있다.
- fast
- slow
- keyspace
- read
- write

## 키 접근 제어
유저가 접근할 수 있는 키도 제어할 수 있다.
- ~*, allkeys : 모든 키에대한 접근 가능
- ~<패턴> : 접근 가능한 키를 정의 가능
레디스 7버전부터는 키에대한 읽기, 쓰기 권한도 부여 가능
- %R~<패턴> : 키에대한 읽기 권한 부여
- %W~<패턴> : 키에대한 쓰기 권한 부여
- %RW~<패턴> : 읽기 쓰기 권한 부여 == ~<패턴>

## 셀렉터
버전 7에서 새로 추가된 개념으로 ACL 규칙을 더 유연하게 설정할 수 있다.
```bash
> ACL SETUSER loguser resetkeys ~log:* (+GET ~mail:*)
```
위의 규칙에서 괄호 안에 정의된 것이 셀렉터이다.
loguser에 정의된 모든 키를 리셋하고 log:에 대한 모든 접근을 부여한 뒤 mail:에 대해서는 get만 가능하도록 설정한 것을 의미한다.

## pub/sub 채널 접근 제어
- $<패턴> 키워드로 pub/sub 채널에 접근할 수 있는 권한을 제어할 수 있다.
- resetchannaels 권한은 어떤 채널에도 발행 또는 구독할 수 없음을 의미한다.
## 유저 초기화
- reset 커맨드를 이용해 유저에 대한 모든 권한을 회수하고 기본 상태로 변경할 수 있다.
- ACL SETUSER를 한 직후와 동일해 진다.

## ACL 규칙 파일로 관리하기
ACL 규칙은 파일로 관리할수 있다. 기본적으로는 일반 설정 파일인 redis.conf에 저장되며 ACL파일을 따로 관리해 유저 정보만 저장하는 것도 가능하다.
ACL 파일을 사용하지 않을때에는 CONFIG REWRITE 커맨드를 이용해 레디스의 모든 설정값과 ACL 룰을 한번에 redis.conf에 저장할 수 있으나 ACL 파일을 따로 사용한다고 지정해뒀을 떄 CONFIG REWRITE 커맨드를 사용하면 ACL 정보는 저장되지 않는 다는 점에 유의해야 한다.


# SSL/TLS
레디스는 버전 6부터 SSL/TLS 프로토콜을 이용한 보안 연결을 지원한다.

## SSL/TLS란?
SSL(Secure Sockets Layer) 은 암호화를 위한 인터넷 기반 보안 프로토콜이다.
TLS(Transport Layer Security)는 현재 널리 사용되고 있는 보안 프로토콜로, SSL에서 시작되어 발전해왔다.

SSL/TLS 프로토콜은 데이터 전송 과정에서 정보를 암호화 함으로써 중간에서 데이터가 노출되거나 조작되는 것을 방지한다.
이 프로토콜은 핸드셰이크 과정을 거치며, 핸드셰이크 과정에서 사용되는 다양한 암호와 기술과 인증서는 통신의 무결성과 기밀성을 확보하는 데 중요한 역할을 한다.

- 무결성 : 데이터가 전송 과정에서 왜곡되지 않았음을 보증한다.
- 기밀성 : 제 3자가 데이터를 열람할 수 없도록 보호한다.

레디스는 네트워크를 통해 클라이언트와 서버 간에 데이터를 빠르게 주고 받는다. 이 과정에서 민감한 정보나 중요한 데이터가 평문형태로 전송되면, 악의적인 공격자가 네트워크 트래픽을 감청해서 정보를 쉽게 열람하거나 조작할 위험이 있다. 

SSL/TLS 통신을 적용함으로써 데이터 전송 과정을 암호화 하면 이러한 보안 위험을 크게 감소시킬 수 있다.

## 레디스에서 SSL/TLS 사용하기
기본적으로 레디스에서 SSL/TLS는 비활성화 되어 있다. SSL/TLS프로토콜을 사용하기 위해서는 레디스를 처음 빌드할 때부터 다음과 같이 정의해야한다.

```bash
make BUILD_TLS=yes
```
일반적으로 레디스에서 SSL/TLS 프로토콜을 사용할 때에는 레디스 인스턴스와 클라이언트 간 동일한 인증서를 사용한다. 
- redis.conf 파일에서 tls-port 값을 추가하면 SSL/TLS 연결을 사용할 것이라는 것을 의미한다. 
- 연결에 필요한 인증 파일들에 대한 정의도 필요하다.
- port 0 : SSL/TLS 를 사용하지 않고서는 레디스에 접근할 수 없다.
- redis-cli 를 이용해 SSL/TLS 프로토콜을 활성화한 인스턴스에 접속할 때에는 연결시 인증서를 입력해야 한다. 이때 지정하는 인증서는 redis.conf에서 지정한 파일과 동일해야한다.
- 애플리케이션에서 레디스에 접속할 때에도 레디스 인스턴스가 설정한 파일과 동일한 인증서를 클라이언트도 가지고 있어야 한다.

## SSL/TLS 를 사용한 HA 구성

### 복제 구성
- 기본적으로 tls-replication 값은 no로 설정돼 있는데, 이는 복제본에서 마스터로의 커넥션은 SSL/TLS 연결이 아닌 일반 프로토콜로 연결됨을 의미한다. 
- 복제서버에서 이 값이 No로 설정돼 있을 경우 정상적으로 복제 연결을 구성할 수 없.
- 복제본에서 마스터로 보내는 연결 또한 SSL/TLS 프로토콜을 이용하기 위해서는 tls-replication 값을 yes로 설정해야한다.

### 센티널 구성

### 클러스터 구성
클러스터 구성에서 SSL/TLS 연결을 사용하려면 tls-cluster yes 구문을 추가해야한다.

모든 클러스터 노드 간의 연결과 클러스터 버스의 통신은 SSL/TLS 프로토콜을 이용해 보호된다.
